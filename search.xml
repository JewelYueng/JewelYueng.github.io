<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[js类型]]></title>
      <url>http://yoursite.com/2017/03/12/js%E7%B1%BB%E5%9E%8B/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>关于js基本类型的容易混淆点<a id="more"></a></excerpt></p>
<p><the rest="" of="" contents="" |="" 余下全文=""><br>javascript里面包含了<strong>七种</strong>数据类型，其中6种称为<strong>基本数据类型</strong>(Boolean, null, undefined, Number, String, Symbol),剩下的就是Object对象。</the></p>
<p>其中：<br>Boolean: 布尔值，true和false<br>null: 一个表明 null 值的特殊关键字。 JavaScript 是大小写敏感的，<strong>因此 null 与 Null、NULL或其他变量完全不同</strong>。<br>undefined: 变量未定义时的属性。<br>Number: 表示数字。<br>String: 表示字符串。<br>Symbol: ES6新增的数据类型，它的实例是唯一的切不可改变的。  </p>
<p>接下来讨论几点比较容易迷惑的地方：  </p>
<ol>
<li><p>==与===的区别<br>==是比较值，而===是比较堆地址</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> a = <span class="string">"1"</span>;</div><div class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">"1"</span>);</div><div class="line"><span class="built_in">console</span>.log(a == b);</div><div class="line"><span class="comment">//true</span></div><div class="line"><span class="built_in">console</span>.log(a === b);</div><div class="line"><span class="comment">//false,因为a和b指向的堆地址不同</span></div></pre></td></tr></table></figure>
</li>
<li><p>false的等效值:  </p>
</li>
</ol>
<ul>
<li>false</li>
<li>undefined</li>
<li>null</li>
<li>0</li>
<li>NaN</li>
<li>空字符串””<br><strong>请注意：不要混淆原始布尔值的true和false 与 布尔对象的true和false</strong><pre><code class="javascript"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">false</span>)  
<span class="keyword">if</span>(a){  
<span class="comment">//此时将进入循环体  </span>
}  
<span class="keyword">if</span>(a == <span class="literal">true</span>){  
<span class="comment">//此时不是进入循环体  </span>
}
</code></pre>
</li>
</ul>
<ol>
<li>有关于包装类型<br>ECMAScript还提供了三个特殊的引用类型Boolean,String,Number。我们称这三个特殊的引用类型为基本包装类型，也叫<strong>包装对象</strong>.也就是说当读取string,boolean和number这三个基本数据类型的时候，后台就会创建一个对应的基本包装类型对象，从而让我们能够调用一些方法来操作这些数据。  <pre><code class="javascript"><span class="keyword">let</span> str = <span class="string">"12213"</span>
<span class="keyword">let</span> strNum = str.substr(<span class="number">2</span>)
<span class="comment">/*
当第二行代码访问str时后台有以下操作  
1.创建String类型的一个实例  
2.在实例上调用指定方法    
3.销毁这个实例  
*／</span>
</code></pre>
</li>
</ol>
<p>正因为有第三步这个销毁的动作，所以你应该能够明白为什么基本数据类型不可以添加属性和方法，这也正是基本装包类型和引用类型主要区别：对象的生存期.使用new操作符创建的引用类型的实例，在执行流离开当前作用域之前都是一直保存在内存中.而自动创建的基本包装类型的对象，则只存在于一行代码的执行瞬间，然后立即被销毁<br><a href="http://www.html-js.com/article/4015" target="_blank" rel="external">基本数据类型和引用类型的区别详解</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Grammar_and_Types" target="_blank" rel="external">js的数据类型|mdn</a></p>
]]></content>
      
        
        <tags>
            
            <tag> jvascript基础 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
