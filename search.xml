<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[异步解决方案的始末]]></title>
      <url>http://blog.asleepig.cn/2020/03/01/%E5%BC%82%E6%AD%A5%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E7%9A%84%E5%A7%8B%E6%9C%AB/</url>
      <content type="html"></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[严格模式]]></title>
      <url>http://blog.asleepig.cn/2019/03/01/%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>JS严格模式的原因以及浏览器严格模式<a id="more"></a></excerpt></p>
<p><the rest="" of="" contents="" |="" 余下全文=""><br>主要建立在<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Strict_mode" target="_blank" rel="external">MDN｜严格模式</a>基础上进行讲解。</the></p>
<p>严格模式是JS的一个子集，采用具有限制性JavaScript变体的一种方式，使代码更加模范，在更加严格的条件下进行。</p>
<h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>设置“严格模式”的目的，有以下：</p>
<ul>
<li>规范JS代码，消除一些语法不合理的地方，以及写出更加安全的代码。</li>
<li>提高编译器效率。</li>
<li>为未来的ECMAScript版本铺平道路。</li>
</ul>
<p>这个模式体现了JS将会向更合理、更安全、更严谨的方向发展。</p>
<h2 id="标志"><a href="#标志" class="headerlink" title="标志"></a>标志</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&quot;use strict&quot;</div></pre></td></tr></table></figure>
<p>（老版本的浏览器会把它当成一行普通字符串，从而忽略）</p>
<h2 id="调用模式"><a href="#调用模式" class="headerlink" title="调用模式"></a>调用模式</h2><p>严格模式可以应用到整个脚本或者个别函数中。注意在 eval 、Function 、内联事件处理属性、  WindowTimers.setTimeout() 方法中传入的脚本字符串，其行为类似于开启了严格模式的一个单独脚本，它们会如预期一样工作。</p>
<h3 id="整个脚本文件"><a href="#整个脚本文件" class="headerlink" title="整个脚本文件"></a>整个脚本文件</h3><p>在所有语句之前进行声明</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">use strict</div></pre></td></tr></table></figure>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>在函数体所有语句之前进行声明</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">use strict</div></pre></td></tr></table></figure>
<h2 id="需要注意的地方"><a href="#需要注意的地方" class="headerlink" title="需要注意的地方"></a>需要注意的地方</h2><ul>
<li>在{}内进行严格模式的声明是没有效果的，然而在 eval 、Function 、内联事件处理属性、  WindowTimers.setTimeout() 方法中传入的脚本字符串，其行为类似于开启了严格模式的一个单独脚本，它们会如预期一样工作。</li>
<li>为整个文本开启严格模式时，合并冲突代码容易存在陷阱：合并严格模式的代码+非严格模式的代码-&gt;严格模式的代码，容易造成系统无法如预期进行。</li>
<li>为了解决第二点，1. 按一个个函数去开启严格模式；2.可以把严格声明的脚本用一个函数包起来（闭包），在函数中使用严格模式，则可以消除合并的问题。</li>
</ul>
<h2 id="严格模式带来的变化"><a href="#严格模式带来的变化" class="headerlink" title="严格模式带来的变化"></a>严格模式带来的变化</h2><ol>
<li>将问题直接转化成错误</li>
<li>简化变量的使用</li>
<li>让eval和arguments变得简单</li>
</ol>
<h2 id="浏览器严格模式"><a href="#浏览器严格模式" class="headerlink" title="浏览器严格模式"></a>浏览器严格模式</h2><p>主流浏览器现在实现了严格模式。但是不要盲目的依赖它，因为市场上仍然有大量的浏览器版本只部分支持严格模式或者根本就不支持（比如IE10之前的版本）。严格模式改变了语义。依赖这些改变可能会导致没有实现严格模式的浏览器中出现问题或者错误。谨慎地使用严格模式，通过检测相关代码的功能保证严格模式不出问题。最后，记得在支持或者不支持严格模式的浏览器中测试你的代码。如果你只在不支持严格模式的浏览器中测试，那么在支持的浏览器中就很有可能出问题，反之亦然。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[文本标注工具]]></title>
      <url>http://blog.asleepig.cn/2018/08/15/%E6%96%87%E6%9C%AC%E6%A0%87%E6%B3%A8%E5%B7%A5%E5%85%B7/</url>
      <content type="html"><![CDATA[<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol>
<li><a href="https://blog.csdn.net/c9Yv2cf9I06K2A9E/article/details/78560121" target="_blank" rel="external">构想：中文文本标注工具（内附多个开源文本标注工具）</a></li>
<li><a href="https://github.com/deepwel/Chinese-Annotator" target="_blank" rel="external">构想：中文文本标注工具【github】</a></li>
<li><a href="https://juejin.im/post/5b2092b06fb9a01e3b01b144" target="_blank" rel="external">使用Transformer与无监督学习，OpenAI提出可迁移至多种NLP任务的通用模型</a></li>
<li><a href="https://cloud.tencent.com/developer/article/1006327" target="_blank" rel="external">通用文本标注工具 labelme</a></li>
<li><a href="https://blog.openai.com/language-unsupervised/" target="_blank" rel="external">Improving Language Understanding with Unsupervised Learning(用无监督学习提高语言理解能力)</a></li>
</ol>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[命名实体识别NER]]></title>
      <url>http://blog.asleepig.cn/2018/08/15/%E5%91%BD%E5%90%8D%E5%AE%9E%E4%BD%93%E8%AF%86%E5%88%ABNER/</url>
      <content type="html"><![CDATA[<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol>
<li><a href="https://mp.weixin.qq.com/s/yDxv0ifpz_7z-DIY1DdfAQ" target="_blank" rel="external">论文浅尝 | 基于神经网络的实体识别和关系抽取联合学习</a></li>
<li><a href="https://www.paperweekly.site/papers/notes/146" target="_blank" rel="external">神经网络结构在命名实体识别（NER）中的应用</a></li>
<li><a href="http://neuroner.com" target="_blank" rel="external">A Named-Entity Recognition Program based on Neural Networks and Easy to Use</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/29412214" target="_blank" rel="external">基于深度学习的命名实体识别详解（附Github代码）【知乎】</a></li>
<li><a href="https://github.com/shiyybua/NER" target="_blank" rel="external">一个中文的实体命名识别系统【Github】</a></li>
<li><a href="http://michelleful.github.io/code-blog/2015/09/10/parsing-chinese-with-stanford/" target="_blank" rel="external">用斯坦福NLP解析中文文本</a></li>
<li><a href="https://blog.csdn.net/weixin_39837402/article/details/80176048" target="_blank" rel="external">【论文笔记】命名实体识别(NER)论文整理</a></li>
</ol>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[自然语言处理入门（一）]]></title>
      <url>http://blog.asleepig.cn/2018/08/14/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol>
<li><a href="https://zhuanlan.zhihu.com/p/28054589" target="_blank" rel="external">完全图解RNN、RNN变体、Seq2Seq、Attention机制</a></li>
<li><a href="https://blog.csdn.net/Jerr__y/article/details/53749693" target="_blank" rel="external">Seq2Seq学习笔记</a></li>
<li><a href="https://www.jianshu.com/p/1d3de928f40c" target="_blank" rel="external">Seq2Seq入门</a></li>
<li><a href="https://www.zhihu.com/question/23765351" target="_blank" rel="external">【知乎】Softmax函数的特点和作用是什么</a></li>
<li><a href="https://segmentfault.com/a/1190000011480420" target="_blank" rel="external">TF-IDF、词袋模型与特征工程</a></li>
<li><a href="https://blog.csdn.net/sangyongjia/article/details/52440063" target="_blank" rel="external">TF-IDF及其算法</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/26306795" target="_blank" rel="external">秒懂词向量Word2vec的本质【知乎】</a></li>
<li><a href="https://blog.csdn.net/malefactor/article/details/50550211" target="_blank" rel="external">自然语言处理中的Attention Model：是什么及为什么</a></li>
<li><a href="https://blog.csdn.net/malefactor" target="_blank" rel="external">张俊林的博客</a></li>
<li><a href="https://yq.aliyun.com/articles/158691" target="_blank" rel="external">自然语言理解-从规则到深度学习</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/27151397" target="_blank" rel="external">【知乎】【AI前沿】机器阅读理解与问答·Dynamic Co-Attention Networks</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/27421983" target="_blank" rel="external">模型汇总-14 多任务学习-Multitask Learning概述【知乎】</a></li>
</ol>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[远程监督在关系抽取上的应用]]></title>
      <url>http://blog.asleepig.cn/2018/08/14/%E8%BF%9C%E7%A8%8B%E7%9B%91%E7%9D%A3%E5%9C%A8%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96%E4%B8%8A%E7%9A%84%E5%BA%94%E7%94%A8/</url>
      <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul>
<li><a href="#参考文献">参考文献</a></li>
<li><a href="#参考网站">参考网站</a></li>
</ul>
<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><h3 id="关系抽取"><a href="#关系抽取" class="headerlink" title="关系抽取"></a>关系抽取</h3><p>关系抽取事信息抽取的重要子任务，主要的目的是将非结构化或者半结构化描述的自然语言文本转化成结构化数据。在文本中识别出实体后，关系抽取负责抽取实体之间的语义关系。</p>
<h3 id="遇到的困难"><a href="#遇到的困难" class="headerlink" title="遇到的困难"></a>遇到的困难</h3><p>进行关系抽取的学习需要大部分训练数据，而为了得到训练数据，需要人工来对语料进行标记，这个过程需要大量的时间成本和人力成本。</p>
<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>在2009年</p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol>
<li><a href="http://www.aclweb.org/anthology/C14-1220" target="_blank" rel="external">Relation Classification via Convolutional Deep Neural Network</a></li>
<li><a href="http://www.nlpr.ia.ac.cn/cip/~liukang/liukangPageFile/AAAI2017.pdf" target="_blank" rel="external">Distant Supervision for Relation Extraction with Sentence-level Attention and Entity Descriptions</a></li>
<li><a href="https://www.aclweb.org/anthology/P09-1113" target="_blank" rel="external">Distant supervision for relation extraction without labeled data</a></li>
</ol>
<h2 id="参考网站"><a href="#参考网站" class="headerlink" title="参考网站"></a>参考网站</h2><ol>
<li><a href="https://zhuanlan.zhihu.com/p/27029826" target="_blank" rel="external">Neural Relation Extraction with Selective Attention over Instances阅读笔记    【知乎】</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/22666876" target="_blank" rel="external"><neural relation="" extraction="" with="" selective="" attention="" over="" instances="">笔记【知乎】</neural></a></li>
<li><a href="https://github.com/thunlp/NRE" target="_blank" rel="external">Neural Relation Extraction with Selective Attention over Instances的代码</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/32268101" target="_blank" rel="external"><reinforcement learning="" for="" relation="" classification="" from="" noisy="" data="">阅读笔记【知乎】</reinforcement></a></li>
<li><a href="https://yq.aliyun.com/articles/174880" target="_blank" rel="external">【PaperWeekly 第31期】 | 远程监督在关系抽取中的应用</a></li>
<li><a href="http://www.sohu.com/a/165856071_465975" target="_blank" rel="external">一周论文 | 关于远程监督，我们来推荐几篇值得读的论文</a></li>
<li><a href="http://cairohy.github.io/2017/05/10/deeplearning/NLP-RelationExtraction-AAAI2017-%E3%80%8ADistant%20Supervision%20for%20Relation%20Extraction%20with%20Sentence-level%20Attention%20and%20Entity%20Descriptions%E3%80%8B/" target="_blank" rel="external">paperWeekly知识图谱阅读小组-《Distant Supervision for Relation Extraction with Sentence-level Attention and Entity Descriptions》</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/35051652" target="_blank" rel="external">Distant Supervision for Relation Extraction with Sentence-Level Attention and Entity Descriptions【知乎】</a></li>
<li></li>
</ol>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[docker学习]]></title>
      <url>http://blog.asleepig.cn/2018/08/14/docker%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h1 id="Docker学习笔记"><a href="#Docker学习笔记" class="headerlink" title="Docker学习笔记"></a>Docker学习笔记</h1><h2 id="Docker介绍"><a href="#Docker介绍" class="headerlink" title="Docker介绍"></a>Docker介绍</h2><h2 id="参考网站"><a href="#参考网站" class="headerlink" title="参考网站"></a>参考网站</h2><ol>
<li><a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-JenkinsDockerSahi/index.html" target="_blank" rel="external">构建基于 Docker + Jenkins + Sahi 的 Web UI 自动化测试环境</a></li>
<li><a href="https://yq.aliyun.com/articles/63035?spm=a2c4e.11153940.blogcont63517.9.1d773a6ct4ot2k" target="_blank" rel="external">大话Docker入门（一）</a></li>
<li><a href="https://blog.csdn.net/21cnbao/article/details/56275456" target="_blank" rel="external">宋宝华：Docker 最初的2小时(Docker从入门到入门)</a></li>
</ol>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[知识存储]]></title>
      <url>http://blog.asleepig.cn/2018/08/14/%E7%9F%A5%E8%AF%86%E5%AD%98%E5%82%A8/</url>
      <content type="html"><![CDATA[<h1 id="知识存储"><a href="#知识存储" class="headerlink" title="知识存储"></a>知识存储</h1><p><a href="https://github.com/memect/kg-beijing/wiki/第一期w3：知识存储" target="_blank" rel="external">知识存储</a>解决如何管理大量的结构化数据，存储的途径主要有RDF存储以及数据库存储两类。</p>
<h2 id="数据库选择"><a href="#数据库选择" class="headerlink" title="数据库选择"></a>数据库选择</h2><p>我们可以用不同的数据库工具。现代的关系数据库可能可以解决大多数需要知识图谱的场合。某些特殊场合，我们需要图数据库。目前<a href="https://zhuanlan.zhihu.com/p/31921368" target="_blank" rel="external">大规模的知识图谱的存储</a>一般采用图数据库做为最基本的存储引擎。图数据库的优点在于其天然的能表示知识图谱结构，图中的节点表示知识图谱的对象，图中的边表示知识图谱的对象关系；但是其缺点是图数据库的更新比较复杂，对于复杂查询的支持不够。所以我们使用以图数据库为主，结合其他系统的方式来存储知识图谱。</p>
<h3 id="图数据库选择"><a href="#图数据库选择" class="headerlink" title="图数据库选择"></a>图数据库选择</h3><p>Cayley 的github地址：<a href="https://github.com/cayleygraph/cayley/blob/master/docs/Container.md" target="_blank" rel="external">https://github.com/cayleygraph/cayley/blob/master/docs/Container.md</a></p>
<p>在简书上也有对Cayley的使用教程：<a href="https://www.jianshu.com/p/ffda84334f77" target="_blank" rel="external">Cayley数据库</a></p>
<p>在 Google的开发者大会上，有展示<a href="https://www.youtube.com/watch?v=W9pRpSW_KqA" target="_blank" rel="external">如何使用Cayley进行一个小型的知识图谱的构建</a>,可是其实讲的比较少，数据格式也有点局限，亮点是搜索时居然可以像js一样写函数。</p>
<p>可是相应的教程文档比较少，不像Neo4j，随手一查都会有一些<a href="https://www.w3cschool.cn/neo4j/neo4j_cql_create_node.html" target="_blank" rel="external">中文文档</a></p>
<p>据说还有另外一个比较常用的图数据库：dgraph，而且大家对他的期望也挺高的，可以了解一下，<a href="https://dgraph.io" target="_blank" rel="external">github</a>主页非常可爱。网上也有很多<a href="https://www.oschina.net/p/dgraph" target="_blank" rel="external">对dgraph和neo4j的比较分析</a>,中文文档偏少，由于时间考虑暂不深入了解。</p>
<p>两者比较</p>
<table>
<thead>
<tr>
<th></th>
<th>Neo4j</th>
<th>Cayley</th>
</tr>
</thead>
<tbody>
<tr>
<td>查询语言</td>
<td><a href="https://neo4j.com/developer/cypher-query-language/" target="_blank" rel="external">Cypher</a></td>
<td>Grizo(原来名字叫是Gremlin，但是为了区分开TinkerPop的<a href="http://gremlindocs.spmallette.documentup.com/" target="_blank" rel="external">Gremlin</a>而改名字)</td>
</tr>
<tr>
<td>数据库引擎</td>
<td>有自己的搜索引擎，不需要额外配置</td>
<td>没有自己的搜索引擎，需要额外配置，它可以配置多种存储引擎。如leveldb,mysql,mongo等。</td>
</tr>
<tr>
<td>文档</td>
<td>比较完善，操作实战资料比较多</td>
<td>还很年轻，文档不是很完善，而且在线运行的例子说好了已经加载了测试数据，但其实还是没有查询得到。</td>
</tr>
</tbody>
</table>
<p>综上所述，我觉得还是优先使用Neo4j进行数据库搜索，降低学习成果。</p>
<p>PS.</p>
<p>Gremlin的中文教程可以点击<a href="https://www.cnblogs.com/myitroad/p/7727570.html" target="_blank" rel="external">Gremlin:图遍历语言</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Deepdive的NLP处理]]></title>
      <url>http://blog.asleepig.cn/2018/08/14/Deepdive%E5%88%86%E8%AF%8D%E5%99%A8/</url>
      <content type="html"><![CDATA[<h1 id="分词"><a href="#分词" class="headerlink" title="分词"></a>分词</h1><h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><p>在DeepDive的默认实例中，默认使用的分词器是Stanford CoreNLP的工具包，这个工具包可以通过更换语言包来实现对<a href="http://www.voidcn.com/article/p-yamcqsua-mk.html" target="_blank" rel="external">中文的支持</a>，但由于此工具包切词类、命名实体识别类使用的是条件随机场CRF，所以不能做到对用户自定义词典的完全匹配，因此需要进行分词器的优化或者更换。</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ol>
<li><p>优化分词器</p>
<p>自定义CoreNLP中的切词类，达到优化的目的。<a href="http://www.voidcn.com/article/p-delajpay-bep.html" target="_blank" rel="external">优化切词类的方法在这里</a>，此外下面的相关文章也有StanfordNLP的学习笔记。</p>
</li>
<li><p>更换分词器</p>
<p>除了CoreNLP外，中文分词还有很多其他的框架，<a href="https://cloud.tencent.com/developer/article/1010981" target="_blank" rel="external">六款中文分词模块尝试:jieba、THULAC、SnowNLP、pynlpir、CoreNLP、pyLTP</a></p>
<p>其中，<a href="https://github.com/HIT-SCIR/pyltp" target="_blank" rel="external">pyltp</a>是哈工大语言技术平台的python封装，和CoreNLP一样，可以进行分词、命名实体识别、词性标注、句法分析等NLP处理，这是它的<a href="http://ltp.readthedocs.io/zh_CN/latest/theory.html#customized-cws-reference-label" target="_blank" rel="external">实现原理</a>,具体实践可见<a href="https://www.jianshu.com/p/867478f0e674" target="_blank" rel="external">这里</a>。在pyltp中，我们可以使用<a href="http://ltp.readthedocs.io/zh_CN/latest/train.html" target="_blank" rel="external">训练套件</a>来对模型进行训练,从而实现<a href="http://ltp.readthedocs.io/zh_CN/latest/theory.html#customized-cws-reference-label" target="_blank" rel="external">个性化分词</a></p>
</li>
</ol>
<h1 id="依存分析"><a href="#依存分析" class="headerlink" title="依存分析"></a>依存分析</h1><p><a href="https://blog.csdn.net/vincent2610/article/details/17848741" target="_blank" rel="external">Stanford CoreNLP工具包中可以进行中文语法解析</a>，其中，Parser遵循依存分析的以下定理：</p>
<ul>
<li>一个句子中存在一个成分称之为根（root），这个成分不依赖于其它成分。</li>
<li>其它成分直接依存于某一成分。</li>
<li>任何一个成分都不能依存与两个或两个以上的成分。</li>
<li>如果A成分直接依存于B成分，而C成分在句中位于A和B之间，那么C或者直接依存于B，或者直接依存于A和B之间的某一成分。</li>
<li>中心成分左右两面的其它成分相互不发生关系。</li>
</ul>
<p>分析结果的符号解析详见<a href="https://blog.csdn.net/lihaitao000/article/details/51812618" target="_blank" rel="external">这里</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[条件随机场CRF]]></title>
      <url>http://blog.asleepig.cn/2018/08/13/%E6%9D%A1%E4%BB%B6%E9%9A%8F%E6%9C%BA%E5%9C%BACRF/</url>
      <content type="html"><![CDATA[<h2 id="参考网站"><a href="#参考网站" class="headerlink" title="参考网站"></a>参考网站</h2><ol>
<li><a href="https://www.zhihu.com/question/35866596" target="_blank" rel="external">如何用简单易懂的例子解释条件随机场（CRF）模型？它和HMM有什么区别【知乎】</a></li>
<li><a href="">简明条件随机场CRF介绍 | 附带纯Keras实现</a></li>
</ol>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Deepdive初次体验—]]></title>
      <url>http://blog.asleepig.cn/2018/03/21/Deepdive%E5%88%9D%E6%AC%A1%E4%BD%93%E9%AA%8C%E2%80%94%E2%80%94spouse/</url>
      <content type="html"><![CDATA[<p>##参考网站：</p>
<ol>
<li><a href="http://deepdive.stanford.edu/quickstart" target="_blank" rel="external">官网的QuickStart</a></li>
<li><a href="http://deepdive.stanford.edu/deepdiveapp#db-url" target="_blank" rel="external">db.url中的postgreSQL ssl写法</a> </li>
<li><a href="http://blog.csdn.net/u013412066/article/details/68945523" target="_blank" rel="external">quickStart的中文文档</a></li>
<li><a href="http://blog.csdn.net/cx943024256/article/details/79056726" target="_blank" rel="external">cn-deepdive的使用教程</a></li>
<li><a href="http://openkg1.oss-cn-beijing.aliyuncs.com/478e0087-8dd6-417c-9a49-4ce12f5ec22c/tutorial.pdf" target="_blank" rel="external">cn-deepdive的官方使用教程（包括安装）</a></li>
<li><a href="http://deepdive.stanford.edu/installation" target="_blank" rel="external">Installation官方文档</a></li>
<li><a href="http://deepdive.stanford.edu/example-spouse" target="_blank" rel="external">例子的官方详细教程</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2013/12/getting_started_with_postgresql.html" target="_blank" rel="external">Postgresql的基本命令</a></li>
<li><a href="https://zhaodaolimeng.github.io/deepdivexue-xi-bi-ji/" target="_blank" rel="external">列举了中英文Deepdive的博客</a></li>
<li><a href="http://www.xjishu.com/zhuanli/55/201710326192_2.html" target="_blank" rel="external">一种基于Deepdive的领域文本知识抽取方法与流程</a></li>
<li><a href="https://yq.aliyun.com/articles/544941" target="_blank" rel="external">知识图谱数据构建的“硬骨头”，阿里工程师如何拿下？</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/20394260" target="_blank" rel="external">知识图谱的应用【知乎】</a></li>
<li><a href="https://zhaodaolimeng.github.io/deepdivexue-xi-bi-ji/" target="_blank" rel="external">Deepdive学习笔记</a></li>
</ol>
<p>#Deepdive spouse初体验</p>
<p>#Deepdive transaction初体验</p>
<p>这两个例子的最大的区别应该就是一个是中文的命名实体识别（transaction）一个是英文的命名实体识别。中文这个是浙江大学的团队通过更改斯坦福大学的model包做成的。</p>
<p><img src="https://github.com/JewelYueng/JewelYueng.github.io/blob/master/img/Deepdive/%E6%B5%81%E7%A8%8B%E5%9B%BE.png?raw=true" alt="流程图"></p>
<h2 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h2><ul>
<li>输入非结构化文档信息</li>
<li>NLP处理</li>
<li>提取候选实体对</li>
<li>提取基于上下文的语义特征</li>
</ul>
<p>#Deepdive standard实践</p>
<p>跑起例子来非常的迅速的就跑完，窃以为一切都如此的顺利。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Deepdive安装血泪史]]></title>
      <url>http://blog.asleepig.cn/2018/03/16/Deepdive%E5%AE%89%E8%A3%85%E8%A1%80%E6%B3%AA%E5%8F%B2/</url>
      <content type="html"><![CDATA[<h1 id="Deepdive安装血泪史"><a href="#Deepdive安装血泪史" class="headerlink" title="Deepdive安装血泪史"></a>Deepdive安装血泪史</h1><h2 id="心理准备"><a href="#心理准备" class="headerlink" title="心理准备"></a>心理准备</h2><p>我压根就没有做好要安装部署很久的准备好吧，最后结果很惨烈，就是我安装了快两天，终于安装好了，踩了很多坑，沉淀一下血泪史。</p>
<p>这里大部分篇幅是针对安装deepdive_docker_sandbox的，毕竟推荐的就是这个。如果是最后你还是想安装deepdive（即选择的第一项）,那可以参考<a href="http://deepdive.stanford.edu/quickstart#launching-or-installing-deepdive" target="_blank" rel="external">官方提供的这一份文档</a>（讲道理我也不知道为什么要提供两份文档）</p>
<h3 id="安装指南"><a href="#安装指南" class="headerlink" title="安装指南"></a>安装指南</h3><p>大部分呢还是按照这个<a href="http://deepdive.stanford.edu/installation" target="_blank" rel="external">安装指南</a>来进行安装的。但是运行的时候，还是会发现很多坑。</p>
<h4 id="坑1-没有装docker和docker-compose。"><a href="#坑1-没有装docker和docker-compose。" class="headerlink" title="坑1:没有装docker和docker-compose。"></a>坑1:没有装docker和docker-compose。</h4><p>在教程里也给出了相应的安装方法：</p>
<ul>
<li><p>ubuntu的看<a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/#prerequisites" target="_blank" rel="external">这里</a></p>
<p>  提醒事项：<br>  请记得留意在中间提到了的 <strong>EXTRA STEPS FOR AUFS</strong>，如果是trusty的话还要多安装一点东西</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get update</div><div class="line">$ sudo apt-get install \</div><div class="line">   linux-image-extra-$(uname -r) \</div><div class="line">   linux-image-extra-virtual</div></pre></td></tr></table></figure>
</li>
</ul>
<pre><code>==而我就是一直没有留意到这里，导致docker-ce的安装就卡了一段时间==
</code></pre><p>  如无意外一直跟着下去就行了的，没有很奇怪的问题。</p>
<p>  如果想要详细了解一下docker的基础知识，可以看一下 <a href="https://yeasy.gitbooks.io/docker_practice/content/container/run.html" target="_blank" rel="external">Docker——从入门到实践</a></p>
<ul>
<li>docker-composed的安装比较顺利，官方也给出了<a href="https://docs.docker.com/compose/install/#install-compose" target="_blank" rel="external">很详细的教程</a></li>
</ul>
<h4 id="坑2-安装过程报错：docker-compose-up-leads-to-“client-and-server-don’t-have-same-version-client-1-14-server-1-12-”-error-but-client-and-server-have-the-same-version"><a href="#坑2-安装过程报错：docker-compose-up-leads-to-“client-and-server-don’t-have-same-version-client-1-14-server-1-12-”-error-but-client-and-server-have-the-same-version" class="headerlink" title="坑2: 安装过程报错：docker-compose up leads to “client and server don’t have same version (client : 1.14, server: 1.12)” error but client and server have the same version"></a>坑2: 安装过程报错：docker-compose up leads to “client and server don’t have same version (client : 1.14, server: 1.12)” error but client and server have the same version</h4><p>分析一下错误：就是client和server的版本对不上嘛。</p>
<ol>
<li>首先，就是先把坑1的<strong>docker-ce</strong>给安装了。</li>
<li>然后，在命令行中输入</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">export COMPOSE_API_VERSION=1.22</div></pre></td></tr></table></figure>
<p>为什么修改成1.22呢，因为后面还有几个东西的运行需要COMPOSE_API_VERSION&gt;1.22的，所以顺便在这里改了。问题参考：<a href="https://stackoverflow.com/questions/29727171/docker-compose-up-leads-to-client-and-server-dont-have-same-version-client" target="_blank" rel="external">Stack overflow</a></p>
<ol>
<li>然后应该就一路畅通了</li>
</ol>
<h4 id="坑3-0-0-0-0-8888地址被占用"><a href="#坑3-0-0-0-0-8888地址被占用" class="headerlink" title="坑3: 0.0.0.0:8888地址被占用"></a>坑3: 0.0.0.0:8888地址被占用</h4><p>坑二已经说了，应该一路畅通，前提是，你的8888端口没有东西在跑。我当时不小心在8888端口挂了ss并且忘记了自己挂了ss，真的是自作孽。</p>
<p>敲黑板！端口被占用的正确姿势</p>
<p>查查那个端口有什么东西在跑，然后换一个端口跑（说了废话不好意思</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ netstat -anp|grep 8888</div></pre></td></tr></table></figure>
<p>希望以后不会有人踩同样的坑还像我一样浪费了很多时间。</p>
<h4 id="坑4-安装JDK7！！！！！"><a href="#坑4-安装JDK7！！！！！" class="headerlink" title="坑4:安装JDK7！！！！！"></a>坑4:安装JDK7！！！！！</h4><p>我看了很多很多的安装教程，却一直都是</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">oracle JDK7 uninstalled</div><div class="line">dpkg: balbalalalla</div></pre></td></tr></table></figure>
<p>真令人智熄。首先我比较喜欢用apt-get下载，所以下面都是同有着个执念的人的解决方法。当然如果没有报这个错，就可以不看这个了，像我的本机就没有出现这个问题。</p>
<p>解决方法：<a href="https://askubuntu.com/questions/414885/oracle-jdk-7-is-not-installed-error/525719" target="_blank" rel="external">Oracle JDK7 Is Not installed</a> 感谢大兄弟。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[protege的使用教程]]></title>
      <url>http://blog.asleepig.cn/2018/01/25/protege%E7%9A%84%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h1 id="Protege的使用教程（尽量详细）"><a href="#Protege的使用教程（尽量详细）" class="headerlink" title="Protege的使用教程（尽量详细）"></a>Protege的使用教程（尽量详细）</h1><p><del>首先吐槽一句，对初次使用者真的好鸡儿难用，不过</del>==如果用熟了就会用的很开心==<del>，真的是一个很让人纠结的工具。</del></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[vscode-eslint格式化问题]]></title>
      <url>http://blog.asleepig.cn/2018/01/23/vscode-eslint%E6%A0%BC%E5%BC%8F%E5%8C%96%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>eslint的vertu插件更新后的坑。<a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h1 id="vscode配置eslint"><a href="#vscode配置eslint" class="headerlink" title="vscode配置eslint"></a>vscode配置eslint</h1><p><a href="http://eslint.cn" target="_blank" rel="external">eslint</a>的作用是什么我就不再多说了</p>
<h2 id="太长不看版"><a href="#太长不看版" class="headerlink" title="太长不看版"></a>太长不看版</h2><p>在setting.json 文件中加一下代码，前提是你安装使用的vertu</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&quot;eslint.autoFixOnSave&quot;: true,</div><div class="line">&quot;files.autoSave&quot;:&quot;off&quot;,</div><div class="line">&quot;eslint.validate&quot;: [</div><div class="line">   &quot;javascript&quot;,</div><div class="line">   &quot;javascriptreact&quot;,</div><div class="line">   &quot;html&quot;,</div><div class="line">    &#123; &quot;language&quot;: &quot;vue&quot;, &quot;autoFix&quot;: true &#125;</div><div class="line"> ],</div><div class="line"> &quot;eslint.options&quot;: &#123;</div><div class="line">    &quot;plugins&quot;: [&quot;html&quot;]</div><div class="line">&#125;,</div><div class="line">//为了符合eslint的两个空格间隔原则</div><div class="line">&quot;editor.tabSize&quot;: 2</div></pre></td></tr></table></figure>
<h2 id="情况复杂不想打字版"><a href="#情况复杂不想打字版" class="headerlink" title="情况复杂不想打字版"></a>情况复杂不想打字版</h2><p>参考： </p>
<p><a href="http://www.cnblogs.com/why-not-try/p/8067559.html" target="_blank" rel="external">vscode配置eslint</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/30646993" target="_blank" rel="external">使用VSCode写Vue项目，ESLint如何自动格式化不符合规范的代码</a></p>
<p><a href="https://www.jianshu.com/p/69bfcb95b8d7" target="_blank" rel="external">vue eslint 代码自动格式化</a></p>
</the>]]></content>
      
        
        <tags>
            
            <tag> IDE配置 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vue+less环境配置]]></title>
      <url>http://blog.asleepig.cn/2018/01/23/vue-les%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>vue+less简单无图搭建流程<a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h1 id="Vue项目的搭建"><a href="#Vue项目的搭建" class="headerlink" title="Vue项目的搭建"></a>Vue项目的搭建</h1><p><strong>默认已经安装了npm，如没有安装npm和node请先安装</strong></p>
<ol>
<li><p>安装vue-cli脚手架构建工具。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install vue-cli -g</div></pre></td></tr></table></figure>
</li>
</ol>
<p>  安装完以后输入</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vue -V</div></pre></td></tr></table></figure>
<p>  如果正常显示版本号以后，就是安装成功的意思。</p>
<ol>
<li><p>使用vue-cli来初始化项目。</p>
<ol>
<li><p>首先先进入项目目录，例如我会进入WebstormProject文件夹 <figure class="highlight plain"><figcaption><span>WebstormProjects````</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">2. 然后就是初始化项目了，命令是	````vue init &lt;template&gt; &lt;projectName&gt;````，template的位置填写模版，projectName填写项目名称，例如我用webpack来初始化项目myProject</div></pre></td></tr></table></figure></p>
<p>vue init webpack myProject</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">3. 接下来就会开始向你确认需不需要一些配置，看个人需要选择回车或者其他回答。</div><div class="line">4. 现在的新建完以后似乎会自动帮你执行npm install 或者 yarn,所以安装完以后请直接进入工作目录,启动服务</div></pre></td></tr></table></figure>
</li>
</ol>
<p>cd myProject<br>npm run dev //这里也可以使用yarn dev</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">5. 成功启动以后即项目构建成功</div><div class="line"></div><div class="line"></div><div class="line">## 配置less</div><div class="line"></div><div class="line">虽然我使用的是less但是其实sass的安装也是大同小异。</div><div class="line"></div><div class="line">1. 先安装less相应的依赖</div></pre></td></tr></table></figure>
<p>npm install less less-loader –save</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">2. 然后在webpack.base.conf.js中配置相应的loader，在原来的rules的数组里加上</div></pre></td></tr></table></figure>
</li>
</ol>
<p>{<br>  test: /.less$/,<br>  loader: “style-loader!css-loader!less-loader”<br>}<br>````</p>
<ol>
<li>大功告成。</li>
</ol>
<p>参考网址： <a href="https://segmentfault.com/a/1190000009890826#articleHeader7" target="_blank" rel="external">Vue 2.0 项目创建+Element-ui+Less+typescript</a></p>
</the>]]></content>
      
        
        <tags>
            
            <tag> js基础 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[flask]]></title>
      <url>http://blog.asleepig.cn/2018/01/23/flask/</url>
      <content type="html"></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[shadowsocks搭建教程]]></title>
      <url>http://blog.asleepig.cn/2017/12/21/shadowsocks/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>简单就学会ss搭建，科学上网。<a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h1 id="科学上网指北"><a href="#科学上网指北" class="headerlink" title="科学上网指北"></a>科学上网指北</h1><h2 id="简单的shadowsocks介绍（可以跳过）"><a href="#简单的shadowsocks介绍（可以跳过）" class="headerlink" title="简单的shadowsocks介绍（可以跳过）"></a>简单的shadowsocks介绍（可以跳过）</h2><p>shadowsocks是一种基于<a href="https://zh.wikipedia.org/wiki/SOCKS#SOCK5" target="_blank" rel="external">socks5</a>代理方式的网络数据加密传输包，并采用Apache许可证、GPL、MIT许可证等多种自由软件许可协议开放源代码。shadowsocks分为服务器端和客户端，在使用之前需要先将服务器部署到服务器上，然后通过客户端连接并创建本地代理。</p>
<p>其运行原理与其他代理工具基本相同，使用特定的中转服务器完成数据传输。当我们在服务器端部署完shadowsocks以后，只需要在客户端输入指定的密码，加密方式和端口，就可以进行连接。在成功连接到服务器后，客户端会在用户的电脑上构建一个本地Socks5代理。浏览网络时，网络流量会被分到本地socks5代理，客户端将其加密之后发送到服务器，服务器以同样的加密方式将流量回传给客户端，以此实现代理上网。</p>
<p>更详细的介绍请参见 <a href="https://zh.wikipedia.org/wiki/Shadowsocks" target="_blank" rel="external">wiki</a></p>
<h2 id="物资准备"><a href="#物资准备" class="headerlink" title="物资准备"></a>物资准备</h2><ol>
<li>一个服务器，在墙外的服务器。我在这里使用的是digitalocean购买的美国节点<del>（选择他是因为github的学生优惠包里面送了这个网站的50美金，能用十一个月呢几乎）</del></li>
<li>一颗翻墙的心。</li>
</ol>
<h2 id="指北正文"><a href="#指北正文" class="headerlink" title="指北正文"></a>指北正文</h2><p>下面所提供的所有方法其实就只是一个核心内容：<strong>在服务器上部署ss</strong></p>
<p>买了vps以后先选择一个系统（最好是linux）然后本地连接上去。连接方法这里不细说，用ssh或者直接在vps平台上也可以登录上去。</p>
<h4 id="正经的ss（以centos7为例）"><a href="#正经的ss（以centos7为例）" class="headerlink" title="正经的ss（以centos7为例）"></a>正经的ss（以centos7为例）</h4><p>请注意 centos6 和 7 的教程不是完全一样的哈，如果选择了centos请注意一下，此外ubuntu正经搭建ss过程请点击<a href="http://blog.csdn.net/yy243/article/details/52370170" target="_blank" rel="external">这里</a></p>
<p><strong>正文开始</strong></p>
<ol>
<li><p>安装shadowsocks</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// 安装python setup tools</div><div class="line">yum install python-setuptools-y</div><div class="line">// 安装pip</div><div class="line">easy_install pip</div><div class="line">// 升级pip</div><div class="line">pip install -upgrade pip</div><div class="line">// 安装shadowsocks</div><div class="line">pip install shadowsocks</div></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li>进行shadowsocks配置</li>
</ol>
<p>先去到ss的配置文件进行修改，文本路径一般为 /etc/shadowsocks-libev/config.json<br>现在使用vim进行编辑</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/shadowsocks-libev/config.json</div></pre></td></tr></table></figure>
<p>然后对其进行以下内容的修改</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">&quot;server&quot;: &quot;0.0.0.0&quot;,</div><div class="line">&quot;server_port&quot;: 8989,</div><div class="line">&quot;local_address&quot;: &quot;127.0.0.1&quot;,</div><div class="line">&quot;local_port&quot;: &quot;1080&quot;,</div><div class="line">&quot;password&quot;: &quot;yourpassword&quot;,</div><div class="line">&quot;timeout&quot;: 300,</div><div class="line">&quot;method&quot;: &quot;ase-256-cfb&quot;,</div><div class="line">&quot;fast_open&quot;: false,</div><div class="line">&quot;workers&quot;: 1</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中，password就是你的密码，server_port就是在客户端填写的端口，可以自己改成喜欢的，method是加密方式，如果想在路由器上运行的话可以改成rc4-md5这样路由器的负荷会小一些，同时加密的安全性也不错。</p>
<ol>
<li><p>创建服务</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim /usr/lib/systemd/system/shadowsocks.service</div></pre></td></tr></table></figure>
</li>
</ol>
<p>然后写入下面的内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">[Unit]</div><div class="line">Description=Shadowsocks Server</div><div class="line">Documentation=https://github.com/shadowsocks/shadowsocks</div><div class="line">After=network.target remote-fs.target nss-lookup.target</div><div class="line">[Service]</div><div class="line">Type=forking</div><div class="line">#设置启动时的配置文件,根据自己的需求改.</div><div class="line">ExecStart=/usr/bin/ssserver -c /etc/shadowsocks-libev/config.json</div><div class="line">-d start</div><div class="line">ExecReload=/bin/kill -HUP $MAINPID</div><div class="line">ExecStop=/usr/bin/ssserver -d stop</div><div class="line">[Install]</div><div class="line">WantedBy=multi-user.target</div></pre></td></tr></table></figure>
<p>保存后退出。</p>
<ol>
<li><p>启动服务</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">systemctl enable shadowsocks</div><div class="line">systemctl start shadowsocks</div></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>配置防火墙</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">firewall-cmd –permanent –add-port=8989/tcp</div><div class="line">firewall-cmd –permanent –add-port=8989/udp</div><div class="line">firewall-cmd –reload</div></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="ssr（以ubuntu为例）"><a href="#ssr（以ubuntu为例）" class="headerlink" title="ssr（以ubuntu为例）"></a>ssr（以ubuntu为例）</h4><p>简单粗暴点就是三行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">wget --no-check-certificate	 https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocksR.sh</div><div class="line">chmod +x shadowsocksR.sh</div><div class="line">./shadowsocksR.sh 2&gt;&amp;1 | tee shadowsocksR.log</div></pre></td></tr></table></figure>
<p>回车，进入ss的配置。<br>可以按照提示输入相应的东西，也可以一路回车，最后到shadowsocks.json中修改配置。<br>配置完成会给你输出你的shadowsocks配置，九子啊客户端中配置相应的项就好了。</p>
<p>详细参看<a href="https://jasper-1024.github.io/2016/06/26/VPS科学上网教程系列/" target="_blank" rel="external">科学上网教程系列</a>中的第七点</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>我是不是漏掉了客户端没有讲？<br>不同操作系统使用客户端不太一样，因为我用的macOS所以我这里只能提供mac客户端的下载链接了</p>
<p><a href="https://github.com/qinyuhang/ShadowsocksX-NG-R/releases" target="_blank" rel="external">shadowsocksX-NG-R</a></p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="http://ryantech.top/posts/16" target="_blank" rel="external">CentOS 7 搭建ShadowSocks(ss)服务器</a></p>
</the>]]></content>
      
        
        <tags>
            
            <tag> 服务器搭建 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js异步机制]]></title>
      <url>http://blog.asleepig.cn/2017/05/26/js%E5%BC%82%E6%AD%A5%E6%9C%BA%E5%88%B6/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>介绍一下js的异步机制<a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h1 id="一、js的单线程"><a href="#一、js的单线程" class="headerlink" title="一、js的单线程"></a>一、js的单线程</h1><p>js是单线程的，其中单线程是指在js引擎中负责解释和执行js代码的线程只有一个，经常称为<strong>主线程</strong>，但是实际上还存在其他的线程，例如说setTimeout之类异步操作的线程，在这里称为<strong>工作线程</strong></p>
<h1 id="二、同步"><a href="#二、同步" class="headerlink" title="二、同步"></a>二、同步</h1></the>]]></content>
      
        
        <tags>
            
            <tag> js基础 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js的立即执行函数]]></title>
      <url>http://blog.asleepig.cn/2017/05/26/js%E7%9A%84%E7%AB%8B%E5%8D%B3%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>简单的说一下js的立即执行函数<a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h1 id="立即执行函数的概念"><a href="#立即执行函数的概念" class="headerlink" title="立即执行函数的概念"></a>立即执行函数的概念</h1><p>立即执行函数（Immediate Functions）是一种语法,可以让函数再定以后马上被执行，比如</p>
<pre><code>(function () {
    console.log(&apos;我是第一种立即执行函数&apos;)
}())
</code></pre><p>或者下面的格式</p>
<pre><code>(function () {
    console.log(&apos;我是第二种立即执行函数&apos;)
})()
</code></pre><p>参考文章<a href="https://segmentfault.com/q/1010000009490850" target="_blank" rel="external">setTimeout中的立即函数</a></p>
<p><a href="http://blog.csdn.net/qq838419230/article/details/8030078" target="_blank" rel="external">JavaScript学习笔记(十四) 立即执行函数</a></p>
<p><a href="http://www.cnblogs.com/TomXu/archive/2011/12/31/2289423.html" target="_blank" rel="external">深入理解JavaScript系列（4）：立即调用的函数表达式</a></p>
</the>]]></content>
      
        
        <tags>
            
            <tag> js基础 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[setTimeout、var与for循环]]></title>
      <url>http://blog.asleepig.cn/2017/05/18/setTimeout%E3%80%81var%E4%B8%8Efor%E5%BE%AA%E7%8E%AF/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>ES6中的let关键字的出现必然有它的原因，var关键字的缺陷是什么。<a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h1 id="有趣的小现象"><a href="#有趣的小现象" class="headerlink" title="有趣的小现象"></a>有趣的小现象</h1><p><strong>Case1：</strong> </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= <span class="number">3</span>; i++)&#123;</div><div class="line">	setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(i)</div><div class="line">	&#125;, i * <span class="number">1000</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>Case 2:</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= <span class="number">3</span>; i++)&#123;</div><div class="line">	setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(i)</div><div class="line">	&#125;(i), i * <span class="number">1000</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>Case 3:</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= <span class="number">3</span>; i++)&#123;</div><div class="line">	(<span class="function"><span class="keyword">function</span> (<span class="params">i</span>)</span>&#123;</div><div class="line">		setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="built_in">console</span>.log(i)</div><div class="line">		&#125;, i * <span class="number">1000</span>)</div><div class="line">	&#125;)(i)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>把这些代码放到浏览器上运行可以看到运行结果分别是</p>
<ol>
<li>每隔1s输出一次4</li>
<li>几乎是马上输出了0-3</li>
<li>先输出0，1s后输出1，2s后输出2…3s后输出3</li>
</ol>
<h1 id="现象解析："><a href="#现象解析：" class="headerlink" title="现象解析："></a>现象解析：</h1><ol>
<li><p>第一个是比较常见的新手错误，以为这样可以达到0s输出0，1s输出1…这样的效果。其实并不然，根据<a href="https://jewelyueng.github.io/2017/05/26/js异步机制/" target="_blank" rel="external">js的异步机制</a>，异步代码会被放入一个事件队列，等到所有其他代码执行后才进行，而不会阻塞线程，而setTimeout就是一个异步函数。所以setTimeout会<strong>在for循环结束后</strong>才被调用，而且每隔一秒会向异步的事件队列中插入一次相应的回调函数，而在console.log(i)真正运行的时候，i已经变成4了， 所以就是每隔1s输出一次4</p>
</li>
<li><p>case 2中的setTimeout第一个参数是一个立即执行函数(<a href="https://jewelyueng.github.io/2017/05/26/js的立即执行函数/" target="_blank" rel="external">什么是立即执行函数</a>)，所以每一次循环都立即执行，setTimeout的第二个参数并没有起作用。所以每一次循环都会输出当前i，所以几乎是马上而同时输出了0-3</p>
</li>
<li><p>case 3中相当于for循环中的循环体是一个立即执行函数，这里有闭包的效果，这个i这是就是一个局部变量，每一次执行时i的值都不一样，就会出现相应的情况.</p>
</li>
</ol>
<p>感谢segmentfault的<a href="https://segmentfault.com/q/1010000004998697" target="_blank" rel="external">for循环中setTimeout问题</a>以及<a href="https://segmentfault.com/q/1010000007759958" target="_blank" rel="external">对于javascript里的块作用域不是很理解，比如下面的这段代码为什么会输出5个6？</a></p>
</the>]]></content>
      
        
        <tags>
            
            <tag> js基础 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[centOS/Mac OSX安装使用tmux]]></title>
      <url>http://blog.asleepig.cn/2017/05/18/centOS-Mac-OSX%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8tmux/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>如何使用tmux维护进程<a id="more"></a></excerpt></p>
<p><the rest="" of="" contents="" |="" 余下全文=""></the></p>
<h1 id="Tmux"><a href="#Tmux" class="headerlink" title="Tmux"></a>Tmux</h1><ul>
<li>为什么使用tmux</li>
</ul>
<p>tmux是linux中医中管理窗口的程序，支持屏幕切分，而且具备丰富的命令行参数，使其灵活、动态的记性各种布局和操作，它可以做到一条命令就启动起来，左侧是终端，右侧是vim。使用它最直观的好处就是：通过一个终端登录远程主机并运行tmux后，在其中可以开启多个控制台而无需再“浪费”所欲的终端来连接这台远程主机，当然其功能远不止于此。（如果能够接受英文，请点击<a href="https://github.com/tmux/tmux" target="_blank" rel="external">tmux的github主页</a>，项目的readme也详细介绍了安装方法。）</p>
<ul>
<li><p>使用场景：</p>
<ol>
<li>多个服务同时运行时，可以同时看到多个控制台，不用一个终端一个终端的切换</li>
<li>做服务器的关注性能时，tmux的多个panel可以很方便同时关注多项性能指标</li>
<li>共享同一组工作环境：在办公室装了tmux在tmux里面运行的进程，在家通过ssh访问服务器后可以共享在tmux运行的工作环境</li>
<li>ssh连接服务器调试程序时，突然broken pipe，那就要重新用ssh连接重新开启调试服务，特别麻烦，可以使用tmux找回原来打开的那些窗口。</li>
</ol>
</li>
</ul>
<ul>
<li>tmux的基本概念</li>
</ul>
<p>tmux的三层主要元素：</p>
<ol>
<li><p><strong>session</strong>：一组窗口的集合，通常用来概括同一个任务。session可以有自己的名字便于任务之间的切换。</p>
</li>
<li><p><strong>Window</strong>：单个可见窗口，windows有自己的编号。</p>
</li>
<li><p><strong>Pane</strong>：窗格，被划分成小块的窗口。</p>
</li>
</ol>
<ul>
<li><p>tmux的安装</p>
<ol>
<li><p>centOS下的安装</p>
<p> 第一步：安装tmux之前需要先安装一些支持的组件:</p>
<p> 下载途径也有很多，我选择直接用yum下载安装。</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install libevent-devel ncurses-devel</div></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ul>
<pre><code>    第二步：下载安装tmux

    下载途径有很多，我选择直接从github上下载下来。

    <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/tmux/tmux.git</div><div class="line">cd tmux</div><div class="line">sh autogen.sh</div><div class="line">./configure &amp;&amp; make</div><div class="line">make install</div></pre></td></tr></table></figure>


2. Mac下的安装

使用mac OSX上自带的homebrew安装。

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew isntall tmux</div></pre></td></tr></table></figure>


出奇的简单。。
</code></pre><ul>
<li><p>tmux的使用</p>
<p>直接新建一个window，并且进入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tmux</div></pre></td></tr></table></figure>
</li>
</ul>
<p>  连接上一次关闭的window，并且进入</p>
<pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tmux attach</div></pre></td></tr></table></figure>
</code></pre><p>####session的使用</p>
<table>
<thead>
<tr>
<th>操作</th>
<th style="text-align:center">快捷键</th>
</tr>
</thead>
<tbody>
<tr>
<td>查看／切换session</td>
<td style="text-align:center">ctrl b s</td>
</tr>
<tr>
<td>离开session</td>
<td style="text-align:center">ctrl b d</td>
</tr>
<tr>
<td>重命名当前的session</td>
<td style="text-align:center">ctrl b $</td>
<td>$ </td>
</tr>
</tbody>
</table>
<p>####Window的使用</p>
<table>
<thead>
<tr>
<th>操作</th>
<th style="text-align:center">快捷键</th>
</tr>
</thead>
<tbody>
<tr>
<td>新建一个窗口</td>
<td style="text-align:center">ctrl b c</td>
</tr>
<tr>
<td>切换到上一个活动的窗口</td>
<td style="text-align:center">ctrl b space</td>
</tr>
<tr>
<td>关闭一个窗口</td>
<td style="text-align:center">ctrl b &amp;</td>
</tr>
<tr>
<td>使用窗口号切换</td>
<td style="text-align:center">ctrl b 窗口号</td>
</tr>
</tbody>
</table>
<p>####Pane的使用</p>
<table>
<thead>
<tr>
<th>操作</th>
<th style="text-align:center">快捷键</th>
</tr>
</thead>
<tbody>
<tr>
<td>切换到下一个窗格</td>
<td style="text-align:center">ctrl b o</td>
</tr>
<tr>
<td>查看所有窗格的编号</td>
<td style="text-align:center">ctrl b q</td>
</tr>
<tr>
<td>垂直拆分出一个新窗格</td>
<td style="text-align:center">ctrl b “</td>
</tr>
<tr>
<td>水平拆分出一个新窗格</td>
<td style="text-align:center">ctrl b %</td>
</tr>
<tr>
<td>暂时把一个窗格放到最大</td>
<td style="text-align:center">ctrl b z</td>
</tr>
</tbody>
</table>
<p>参考文章：</p>
<p><a href="http://cenalulu.github.io/linux/tmux/" target="_blank" rel="external">Tmux-Linux从业者必备利器</a>  </p>
<p><a href="http://www.linuxidc.com/Linux/2014-11/109375.htm" target="_blank" rel="external">CentOS下tmux的安装和使用</a></p>
<p><a href="https://wiki.freebsdchina.org/software/t/tmux" target="_blank" rel="external">使用tmux</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 服务器搭建 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[机器学习的基本概念]]></title>
      <url>http://blog.asleepig.cn/2017/05/08/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
      <content type="html"></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[centOS安装mongoDB]]></title>
      <url>http://blog.asleepig.cn/2017/05/04/centOS%E5%AE%89%E8%A3%85mongoDB/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>想在CentOS下搭建一个node+mongooseDB服务器？这边mark下了如何在CentOS上安装mongoDB<a id="more"></a></excerpt></p>
<p><the rest="" of="" contents="" |="" 余下全文=""></the></p>
<p>#CentOS使用yum安装mongoDB</p>
<p>（以下所有代码都是命令）</p>
<ol>
<li><p>准备工作</p>
<p> 检查是否安装过mongoDB</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sevice mongodb status</div></pre></td></tr></table></figure>
</li>
<li><p>下载&amp;安装</p>
<p> 编辑yum仓库配置</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/yum.repos.d/mongodb.repo</div></pre></td></tr></table></figure>
</li>
</ol>
<pre><code>内容为

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[mongodb-org-3.2]</div><div class="line">name=MongoDB Repository</div><div class="line">baseurl=https://repo.mongodb.org/yum/...$releasever/mongodb-org/3.2/x86_64/</div><div class="line">gpgcheck=0</div><div class="line">enabled=1</div></pre></td></tr></table></figure>


然后安装

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install -y mongodb-org</div></pre></td></tr></table></figure>
</code></pre><ol>
<li>使用mongodb</li>
</ol>
<ul>
<li><p>启动    </p>
<pre><code>sevice mongod start
</code></pre></li>
<li><p>停止</p>
<pre><code>sevice mongod stop
</code></pre></li>
<li><p>重启</p>
<pre><code>sevice mongod restart
</code></pre></li>
<li><p>客户端</p>
<pre><code>mongo
</code></pre></li>
<li><p>更多mongoDB的使用可以参考<a href="https://i.jakeyu.top/2016/10/21/CentOS%E5%AE%89%E8%A3%85mongodb%E6%95%B0%E6%8D%AE%E5%BA%93/" target="_blank" rel="external">CentOS安装mongodb数据库</a></p>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> 服务器搭建 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[apply,call,bind]]></title>
      <url>http://blog.asleepig.cn/2017/03/25/apply-call-bind/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>js的call,apply和bind的不同<a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p><a href="http://web.jobbole.com/83642" target="_blank" rel="external">参考文章： http://web.jobbole.com/83642</a></p>
</the>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[html语义化]]></title>
      <url>http://blog.asleepig.cn/2017/03/21/html%E8%AF%AD%E4%B9%89%E5%8C%96/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>讲述html的语义化的具体体现<a id="more"></a></excerpt></p>
<p><the rest="" of="" contents="" |="" 余下全文=""></the></p>
<p>#什么是html语义化？</p>
<p>根据内容的结构化（内容语义化），选择合适的标签（代码语义化）便于开发者阅读和写出更优雅的代码的同时让浏览器的爬虫和机器很好地解析。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[浏览器渲染，repaint和reflow的区别和优化]]></title>
      <url>http://blog.asleepig.cn/2017/03/21/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%EF%BC%8Crepaint%E5%92%8Creflow%E7%9A%84%E5%8C%BA%E5%88%AB%E5%92%8C%E4%BC%98%E5%8C%96/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>一个优化性能的点<a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>我们已经了解过一次完整的http事务究竟是什么样子的了，其中最接近用户的操作大概就是浏览器解析html文件，因此下面就讲一下浏览器解析的大概工作流程：</p>
<p><img src="https://sfault-image.b0.upaiyun.com/305/513/3055132361-55169ffa877a0" alt="浏览器解析的工作流程图"></p>
<p>图片来自<a href="https://segmentfault.com/a/1190000002629708" target="_blank" rel="external">Repaint、ReFlow的基本认识和优化</a></p>
<p>从图中可以看到是四个步骤：</p>
<ol>
<li>解析HTML，构建DOM树：浏览器中的渲染引擎负责解析html文档，转换树中的html标签或js生成的标签到DOM节点上，此为<strong>内容树</strong></li>
<li>构建渲染树：解析CSS，根据CSS选择器计算出节点的样式，创建<strong>渲染书</strong></li>
<li>布局渲染树：从根节点递归调用，计算每一个元素的大小位置等，给每一个节点所应该出现在屏幕上的精确坐标。</li>
<li>绘制渲染树：遍历渲染树，每个节点将使用UI后端层来绘制。</li>
</ol>
<p>其中，Reapint和Reflow出现在了第三第四步，可以大概看出来这两步都发生了什么：</p>
<ul>
<li>Reflow时，浏览器根据样式来计算，根据计算结果将元素放在它该出现的位置。</li>
<li>Repaint时，每个元素的位置的大小和位置以及其他一些属性都确定下来以后，浏览器按照这些元素的额各自特性绘制一次。</li>
</ul>
<h1 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h1><p>所以，这两个步骤都是整个渲染过程不可或缺的部分，我们平时口中所说的页面渲染，其实可以只发生Repaint或者Reflow也可以两个都发生，例如说以下的一些操作：</p>
<ol>
<li>对DOM节点进行增加删除修改时。</li>
<li>移动DOM节点的位置时。</li>
<li>修改DOM节点的CSS样式时</li>
<li>修改网页默认字体时</li>
</ol>
<p>而在这里不得不提一下，Reflow的成本会比Repaint的高很多，因为一个节点reflow很可能会导致父节点或者同级节点的reflow，因为reflow时计算元素应该出现的位置并且把他们放在应该出现的位置。所以大量的reflow操作是需要尽量避免的，尽量将reflow对性能的影响减到最低。</p>
<ol>
<li>js修改DOM节点样式时，不要一个属性一个属性的修改。优化方法：先定义好css的class，然后修改className</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">//不推荐以下写法</div><div class="line">	el.style.left = 100 + 'px'</div><div class="line">	el.style.top = 200 + 'px'</div><div class="line">//推荐下面的写法</div><div class="line">&lt;style&gt;</div><div class="line">	.new_class&#123;</div><div class="line">		left: 100px;</div><div class="line">		top: 200px;</div><div class="line">	&#125;</div><div class="line">&lt;/style&gt;</div><div class="line">&lt;script&gt;</div><div class="line">	el.className += 'new_class'</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<ol>
<li>不要把DOM节点的属性读写放在循环里，不然会大量读写该节点的属性</li>
<li>必须修改时，修改层级较低的DOM节点。</li>
<li>避免使用table布局，不然一个很小的改动会造成整个table的布局</li>
<li>把对象隐藏时，尽量使用<code>visibility: hidden;</code>代替<code>display: none;</code>因为前者只触发了repaint后者触发了reflow和repaint</li>
<li><p>把DOM节点离线后修改：</p>
<ul>
<li>使用documentFragment对象在内存里操作DOM</li>
<li>clone一个DOM节点到内存里，然后对他进行修改，改完以后跟在线的那个DOM节点交换。</li>
<li>可以先 visibility: hiidden掉一个DOM节点，然后改完以后再显示出来。</li>
</ul>
</li>
</ol>
<p><a href="https://segmentfault.com/a/1190000002629708" target="_blank" rel="external">参考文章：Repaint、ReFlow的基本认识和优化</a></p>
<p><a href="http://www.nowamagic.net/academy/detail/48110677" target="_blank" rel="external">参考文章2: repaint和reflow的更多细节</a></p>
</the>]]></content>
      
        
        <tags>
            
            <tag> 浏览器 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[http事务]]></title>
      <url>http://blog.asleepig.cn/2017/03/21/http%E4%BA%8B%E5%8A%A1/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>DNS解析域名开始，html页面是怎么出现在我们眼前的<a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p>其实这篇笔记也可以勉强算做mark一下一次完整的http事务。</p>
<h1 id="大致流程："><a href="#大致流程：" class="headerlink" title="大致流程："></a>大致流程：</h1><p>域名解析 =&gt; 发起TCP三次握手 =&gt; 建立TCP连接后发起http请求 =&gt; 浏览器解析html代码,并请求html中的资源（如js、css、图片） =&gt; 浏览器对页面进行渲染呈现给用户</p>
<p>一下具体解释一下上面的各个步骤，以输入<a href="http://www.baidu.com为例" target="_blank" rel="external">http://www.baidu.com为例</a></p>
<h2 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h2><ol>
<li>浏览器会首先搜索浏览器自身的DNS缓存，注意这里的缓存时间比较短，大概只有一秒，而且缓存数量少，只能容纳1000条。如果浏览器自身的DNS缓存中存在“www.baidu.com”对应的条目，并且没有过期，则域名解析到此结束。如果没有找到或者找到但是已经过期，域名解析将进入下一步。</li>
<li>浏览器会搜索操作系统自身的DNS缓存，如果找到并且缓存还没有过期，则域名解析到此结束，如果没有找到或者找到但是已经过期，域名解析将进入下一步。</li>
<li>如果是在Windows系统的DNS缓存中也没有找到，那么就会尝试读取hosts文件，看看里面有没有该域名对应的ip地址，如果有则解析成功（因此Windows系统翻墙可以通过修改hosts文件做到，可是可以浏览的国外网站数量就被有限的ip地址限制了。）如果没有找到相应的ip地址，则域名解析将进入下一步。</li>
<li>浏览器发起一个DNS的系统调用，就会向本地配置的首选DNS服务器发起域名解析请求（一般是电信运营商提供），通过UDP协议向DNS的53端发起请求，这个请求是递归的请求，也就是运营商的DNS服务器必须得提供给我们该域名的ip地址。运营商的DNS服务器先看自己的缓存有没有没有过期的缓存条目，如果找到，则解析成功，如果没有找到，运营的DNS服务器会代替我们的浏览器发起迭代DNS解析请求，首先会找根域的DNS的ip地址，然后向根域发起请求询问www.baidu.com的IP，然后根域会给你com域的IP地址，接着运营商DNS服务器向com域发起请求询问www.baidu.com的IP地址，然后com域就会返回baidu.com 的ip地址，接着运营商DNS服务器就会向baidu.com发起请求询问www.baidu.com的ip地址，这个时候终于找到了www.baidu.com的ip地址，把ip地址返回给运营商DNS服务器后，运营商DNS服务器就会把结果返回给浏览器，最后浏览器拿到了相应的ip地址。</li>
</ol>
<h2 id="TCP三次握手"><a href="#TCP三次握手" class="headerlink" title="TCP三次握手"></a>TCP三次握手</h2><ol>
<li>客户端首先发送一个连接请求，ACK=0 表示确认号无效，SYN = 1 表示这是一个连接请求或连接接受报文，同时表示这个数据报不能携带数据，seq = x 表示Client自己的初始序号（seq = 0 就代表这是第0号包），这时候Client进入syn_sent状态，表示客户端等待服务器的回复</li>
<li>服务器监听到连接请求后，如同意建立连接，则向客户端发送确认。TCP报文首部中的SYN 和 ACK都置1 ，ack = x + 1表示期望收到对方下一个报文段的第一个数据字节序号是x+1，同时表明x为止的所有数据都已正确收到（ack=1其实是ack=0+1,也就是期望客户端的第1个包），seq = y 表示Server 自己的初始序号（seq=0就代表这是服务器这边发出的第0号包）。这时服务器进入syn_rcvd，表示服务器已经收到Client的连接请求，等待客户端的确认。</li>
<li>客户端收到确认后还需再次发送确认，同时携带要发送给Server的数据。ACK 置1 表示确认号ack= y + 1 有效（代表期望收到服务器的第1个包），Client自己的序号seq= x + 1（表示这就是我的第1个包，相对于第0个包来说的），一旦收到客户端的确认之后，这个TCP连接就进入Established状态，就可以发起http请求了。</li>
</ol>
<p>整个过程就像是我们的日常对话<br>“你好，你现在有空跟我聊聊吗”<br>“你好，我现在有空，可以跟你聊”<br>“好的，那我跟你说···”</p>
<p><strong>TCP协议选择三次握手的原因</strong></p>
<ol>
<li>两个计算机通信是靠协议来实现的，如果两个计算机使用的协议不一样，是不能进行通信的，这三次握手在一定意义上也是在确定通信双方是否都遵循TCP／IP协议。</li>
<li><p>最主要是为了防止已过期的连接再次穿到被连接的主机上。 考虑以下情景：</p>
<p> A：“你好，你现在有空跟我聊聊吗”</p>
<p> 此时A的问题没有正常传达给B，等了好久B还是没有回应，A决定重新问一句。</p>
<p> A：“你好，你现在有空跟我聊吗”<br> B：“可以啊有空。”<br> A：“balabalabala”<br> …</p>
<p> AB传完东西后，断开连接了，而现在，A的第一句话突然又传到了B那里，然后非常有空的B又回了一句“可以啊有空”，B以为又再次跟A连接上了，却再也等不到A的数据过来了，就会导致B空等，浪费资源。</p>
</li>
<li><p>为什么不选择两次握手？可以考虑以下的一个场景</p>
<p> A：“你好，你现在有空可以跟我聊聊嘛”<br> B：“可以啊，我现在有空”</p>
<p> 假设此时，B的回复因为奇怪的原因没有正常传达给A，即丢包了，接下来AB的反应就会可能形成死锁：</p>
<p> B觉得连接已经成功建立了，可以开始发送数据。</p>
<p> A没有收到B的回复，以为连接没有成功建立，不知道A准备好了没有，将忽略B发来的任何数据，只等待B的确定方便聊天的回复。</p>
<p> 而当B发出的请求超时后，B会重新发送同样的分组。<br> 接着就会形成死锁。</p>
</li>
</ol>
<h2 id="浏览器发起http请求"><a href="#浏览器发起http请求" class="headerlink" title="浏览器发起http请求"></a>浏览器发起http请求</h2><p>经过TCP三次握手后，浏览器发起http请求。</p>
<h2 id="服务器端响应http请求"><a href="#服务器端响应http请求" class="headerlink" title="服务器端响应http请求"></a>服务器端响应http请求</h2><p>服务器受到http请求后，就开始处理请求，处理之后就返回给浏览器html文件。</p>
<h2 id="浏览器解析html代码，并请求html代码中的资源"><a href="#浏览器解析html代码，并请求html代码中的资源" class="headerlink" title="浏览器解析html代码，并请求html代码中的资源"></a>浏览器解析html代码，并请求html代码中的资源</h2><p>浏览器拿到html文件后，就开始解析其中的html代码，遇到js／css／image等静态资源时，就向服务器端请求下载（会使用多线程下载，每个浏览器的线程数不一样），这个时候就用上了keep-alive特性了，建立一次httpi 连接，可以请求多个资源，西崽子愉安的顺序就是按照代码里的顺序，但是由于每个资源大小不一样，所以在浏览器上显示的顺序并不一定是代码里面的顺序。</p>
<p><a href="http://kb.cnblogs.com/page/129756/" target="_blank" rel="external">详细的浏览器工作原理请点击这里</a></p>
<h2 id="浏览器对页面进行渲染呈现给用户"><a href="#浏览器对页面进行渲染呈现给用户" class="headerlink" title="浏览器对页面进行渲染呈现给用户"></a>浏览器对页面进行渲染呈现给用户</h2><p>最后浏览器利用自己的内部工作机制，把请求到的静态资源和html代码进行渲染，渲染之后呈现给用户，至此完成了一次完整的http事务</p>
<p>渲染的具体过程可见：<a href="https://jewelyueng.github.io/2017/03/21/浏览器渲染，repaint和reflow的区别和优化/" target="_blank" rel="external">浏览器渲染，repaint和reflow的区别和优化</a></p>
<p>参考文章：<a href="http://www.cnblogs.com/rwind/p/5479786.html" target="_blank" rel="external">一次完整的http事务</a></p>
</the>]]></content>
      
        
        <tags>
            
            <tag> 浏览器 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js正则表达式]]></title>
      <url>http://blog.asleepig.cn/2017/03/21/js%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>深入浅出js正则表达式<a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文=""></the>]]></content>
      
        
        <tags>
            
            <tag> js基础 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js事件模型]]></title>
      <url>http://blog.asleepig.cn/2017/03/20/js%E4%BA%8B%E4%BB%B6%E6%B5%81/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>简单讲述js的事件模型<a id="more"></a></excerpt></p>
<p><the rest="" of="" contents="" |="" 余下全文=""></the></p>
<h1 id="EventTarget接口"><a href="#EventTarget接口" class="headerlink" title="EventTarget接口"></a>EventTarget接口</h1><ul>
<li><p>addEventListener：绑定事件的监听函数</p>
<p>  这个函数用在当前节点或者对象上，定义一个特定事件的监听函数。</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*调用格式：targetObject.addEventListener(type, listener[, useCapture])</span></div><div class="line">*type:事件名称，大小写敏感，例如说"click"（鼠标点击事件）</div><div class="line">*listener：监听函数。事件发生时会调用该监听函数。</div><div class="line">*useCapture：布尔值，表示函数是否在捕获阶段触发，默认为false，即监听函数只会在冒泡阶段被触发。有部分老浏览器规定该参数必选，较新版本的浏览器允许参数可选，所以为了保持兼容，建议总是写上这个参数</div><div class="line">*／</div><div class="line">//实例</div><div class="line">var button = document.getElementById('button');</div><div class="line">button.addEventListener('click',()=&gt;&#123;</div><div class="line">console.log('你点击了按钮button')</div><div class="line">&#125;,false)</div></pre></td></tr></table></figure>
</li>
</ul>
<p>addEventListener可以为当前对象添加多个监听函数。</p>
<p>注意：如果为同一时间添加同一个监听函数，则该函数只会执行一次，多余的添加会被自动去除（不必使用removeEventListener手动去除）</p>
<pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">call_back</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'call_back'</span>)</div><div class="line">&#125;;</div><div class="line">button.addEventListener(<span class="string">'click'</span>, hello, <span class="literal">false</span>);</div><div class="line">button.addEventListener(<span class="string">'click'</span>, hello, <span class="literal">false</span>);</div><div class="line"><span class="comment">//此时只会输出一次“call_back”</span></div></pre></td></tr></table></figure>
</code></pre><p>如果希望向监听函数传递参数，可用匿名函数包装</p>
<pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params">x</span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(x)</div><div class="line">&#125;</div><div class="line">button.addEventListener(<span class="string">'click'</span>,() =&gt; &#123;</div><div class="line">print(<span class="string">"hello"</span>)</div><div class="line">&#125;, <span class="literal">false</span>);</div></pre></td></tr></table></figure>
</code></pre><ul>
<li><p>removeEventListener：移除事件的监听函数</p>
<p>  removeEventListener方法用来移除addEventListener方法添加的事件监听函数。</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">	button.removeEventListener(<span class="string">'click'</span>, listener, <span class="literal">false</span>)</div><div class="line">	<span class="string">``</span><span class="string">`	</span></div><div class="line">	</div><div class="line">removeEventListener方法的参数，与addEventListener方法完全一致。它的第一个参数“事件类型”，大小写敏感。</div><div class="line">	**注意**，removeEventListener方法移除的监听函数，必须与对应的addEventListener方法的参数**完全一致**，而且必须在**同一个**元素节点，否则无效。</div><div class="line"></div><div class="line">- dispatchEvent：触发事件</div><div class="line"></div><div class="line">dispatchEvent方法在当前节点上触发指定事件，从而触发监听函数的执行。该方法返回一个布尔值，只要有一个监听函数调用了Event.preventDefault()，则返回值为false，否则为true。</div><div class="line">	</div><div class="line">	`<span class="string">``</span>javascript</div><div class="line">		para.addEventListener(<span class="string">'click'</span>, hello, <span class="literal">false</span>)</div><div class="line">		<span class="keyword">var</span> event = <span class="keyword">new</span> Event(<span class="string">'click'</span>)</div><div class="line">		para.dispatchEvent(event)</div><div class="line">		<span class="comment">//可以获取到para.dispatchEvent(event)的返回值。</span></div><div class="line">		<span class="comment">//true 被点击，false 没有被点击</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="onClick和addEventListener的比较"><a href="#onClick和addEventListener的比较" class="headerlink" title="onClick和addEventListener的比较"></a>onClick和addEventListener的比较</h1><ul>
<li><h2 id="共同点"><a href="#共同点" class="headerlink" title="共同点"></a>共同点</h2><p>  都可以定义某些事件的监听代码</p>
</li>
<li><h2 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h2></li>
</ul>
<h3 id="绑定方法："><a href="#绑定方法：" class="headerlink" title="绑定方法："></a>绑定方法：</h3><pre><code><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">//onclick的绑定方法</div><div class="line">//在html标签中</div><div class="line">&lt;div onclick="doSomeThing()"&gt;点击这个div就可以调用函数&lt;/div&gt;</div><div class="line">//在js中</div><div class="line">//1、通过设置element节点的setAttribute方法</div><div class="line">el.setAttribute('onclick', 'doSomeThing()')</div><div class="line">//2、用.onclick指定监听方法	</div><div class="line">div.onclick = () =&gt; &#123;</div><div class="line">...</div><div class="line">&#125;</div><div class="line"></div><div class="line">//addEventListener的绑定方法</div><div class="line">//通过Element节点、document节点、window对象的addEventListener方法，也可以定义事件的监听函数。</div><div class="line">div.addEventListener('clcik',() =&gt; &#123;</div><div class="line">...</div><div class="line">&#125;,false)</div></pre></td></tr></table></figure>
</code></pre><p>在上面的三种方法中，在html中绑定监听方法在一定程度上违反了html和js代码分离的原则，而在js中通过设置onclick设置监听有一个缺点，就是同一个事件只能定义一个监听函数，重复定义的话，后一次定义会覆盖前一个，但是所有浏览器都支持着几个方法。</p>
<h3 id="触发阶段"><a href="#触发阶段" class="headerlink" title="触发阶段"></a>触发阶段</h3><pre><code>onclick的触发阶段只能在冒泡阶段出发，而addEventListener可以制定在哪个阶段（捕获阶段还是冒泡阶段）触发。
</code></pre><ul>
<li><h2 id="推荐用法"><a href="#推荐用法" class="headerlink" title="推荐用法"></a>推荐用法</h2><p>  <strong>addEventListener</strong>:</p>
<ul>
<li>可以针对同一个事件，监听多个监听函数。</li>
<li>能够指定在哪个阶段触发</li>
<li>除了DOM节点外，还可以部署在window，XMLHttpRequest灯对象上面。</li>
</ul>
</li>
</ul>
<h1 id="事件传播"><a href="#事件传播" class="headerlink" title="事件传播"></a>事件传播</h1><p>事件的传播模型分成三个阶段</p>
<ul>
<li>第一阶段：从window对象传导到目标节点，称为<strong>捕获阶段</strong>(capture phase)</li>
<li>第二阶段：在目标节点上触发。称为<strong>目标阶段</strong>（target phase）</li>
<li>第三阶段：从目标节点传导回window对象，称为<strong>冒泡阶段</strong>（bubbling phase）</li>
</ul>
<h1 id="事件代理／事件委托"><a href="#事件代理／事件委托" class="headerlink" title="事件代理／事件委托"></a>事件代理／事件委托</h1><p>由于时间会在冒泡阶段向上传播到父节点，因此可以吧子节点的监听函数定义在父节点上，由父节点的监听函数统一处理多个子元素的事件，这种方法叫做<strong>事件的代理（delegation）</strong></p>
<p>这样做的好处是：只要定义一个监听函数，就能处理多个子节点的事件，而且<strong>以后再添加子节点，监听函数依然有效</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">"father"</span>).addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">	<span class="keyword">if</span>(e.target &amp;&amp; e.target.nodeName.toUpperCase === <span class="string">'LI'</span>)&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;e.target.id&#125;</span>was clicked`</span>)</div><div class="line">	&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>如果希望事件到某个节点为止，不再传播，可以使用事件对象的stopPropagation方法。</p>
<p>但是stopPropagation方法只会阻止当前监听函数的传播，不会阻止同节点上的其他监听函数的传播，如果想不再触发那些监听函数，可以使用stopImmediatePropagation方法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">p.addEventListener(<span class="string">'click'</span>,(event) =&gt; &#123;</div><div class="line">	event.stopImmediatePropagation()</div><div class="line">&#125;)</div><div class="line">p.addEventListener(<span class="string">'click'</span>, () =&gt; &#123;</div><div class="line">	...</div><div class="line">	<span class="comment">//不会被触发</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p><a href="http://javascript.ruanyifeng.com/dom/event.html#toc10" target="_blank" rel="external">参考链接:事件模型</a></p>
]]></content>
      
        
        <tags>
            
            <tag> js基础 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[让一个元素看不见的方法]]></title>
      <url>http://blog.asleepig.cn/2017/03/18/%E8%AE%A9%E4%B8%80%E4%B8%AA%E5%85%83%E7%B4%A0%E7%9C%8B%E4%B8%8D%E8%A7%81%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>讲述如何使一个元素从看得见到看不见的所有办法<a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p>接下来介绍几个可以隐藏元素的方法：</p>
<ul>
<li>{display:none;}</li>
<li>{visibility: hidden;}</li>
<li>{position: absolute; top: -999em;}</li>
<li>{position: relative; top: -999em;}</li>
<li>{position: absolute; visibility: hidden;}</li>
<li>{height: 0; overflow: hidden;}</li>
<li>{opacity: 0; filter:Alpha(opacity=0);}</li>
<li>{ position: absolute; opacity: 0; filter:Alpha(opacity=0); }</li>
</ul>
</the>]]></content>
      
        
        <tags>
            
            <tag> css应用 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js模块化]]></title>
      <url>http://blog.asleepig.cn/2017/03/18/js%E6%A8%A1%E5%9D%97%E5%8C%96/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>js模块化<a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文=""></the>]]></content>
      
        
        <tags>
            
            <tag> js基础 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[水平竖直居中的方法]]></title>
      <url>http://blog.asleepig.cn/2017/03/17/%E6%B0%B4%E5%B9%B3%E7%AB%96%E7%9B%B4%E5%B1%85%E4%B8%AD%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>教你如何用css做到使一个元素在水平方向上和竖直方向上的居中<a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p>以下是可以使元素快块居中的css：</p>
<p>1.<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">	width: 400px;</div><div class="line">	height: 200px;</div><div class="line">	position: absolute;</div><div class="line">	left: 50%;</div><div class="line">	top: 50%;</div><div class="line">	margin: -100px 0 0 -200px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">	width: 400px;</div><div class="line">	height: 200px;</div><div class="line">	position: absolute;</div><div class="line">	top: 0;</div><div class="line">	left: 0;</div><div class="line">	right: 0;</div><div class="line">	bottom: 0;</div><div class="line">	margin: auto;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>3.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">	width: 400px;</div><div class="line">	height: 200px;</div><div class="line">	position: absolute;</div><div class="line">	top: 0;</div><div class="line">	left: 0;</div><div class="line">	right: 0;</div><div class="line">	bottom: 0;</div><div class="line">	margin: auto;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>4.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">	width: 50%;</div><div class="line">	background: red;</div><div class="line">	display: inline-block;</div><div class="line">	vertical-align: middle;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>5.使用table-cell来辅助实现，实现的时候需要用三层元素从而使最里层元素居中。需要的可以直接google一下。。。<br>6.目前使用最开心的flex-box布局实现居中，但是也要借助父元素来子元素的居中。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">.father&#123;</div><div class="line"> 	display: flex;</div><div class="line"> 	flex-direction: row;</div><div class="line"> 	//其实这里使用row或者column都没有问题</div><div class="line"> 	align-items: center;</div><div class="line"> 	justify-contents: center;</div><div class="line">&#125;</div><div class="line">.son&#123;</div><div class="line">	flex: 0 1 100px;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对flex-box不了解的话可以回去 mdn说明文档细看。</p>
<p><a href="http://the-echoplex.net/flexyboxes/" target="_blank" rel="external">flex-box试验场</a></p>
</the>]]></content>
      
        
        <tags>
            
            <tag> css应用 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Snake文档]]></title>
      <url>http://blog.asleepig.cn/2017/03/17/Snake%E6%96%87%E6%A1%A3/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>这是一款用vue.js实现的贪吃蛇页游。下面介绍一下实现时的思想。<a id="more"></a></excerpt></p>
<p><the rest="" of="" contents="" |="" 余下全文=""></the></p>
<h1 id="snake介绍"><a href="#snake介绍" class="headerlink" title="snake介绍"></a>snake介绍</h1><p>a Vue webPage for snake game</p>
<p>这是一款用vue.js实现的贪吃蛇页游。下面介绍一下实现时的思想。</p>
<p>PS：逻辑运算都放在script标签内</p>
<p><a href="https://github.com/JewelYueng/snake" target="_blank" rel="external">项目地址:https://github.com/JewelYueng/snake</a></p>
<h1 id="设计数据结构"><a href="#设计数据结构" class="headerlink" title="设计数据结构"></a>设计数据结构</h1><ul>
<li><strong>Step 1：</strong>根据贪吃蛇的运行情况，大致分成三个数据结构，分别是Fruit（随机出现的水果）、Snake（蛇）、Game（负责管理游戏的运行状态）</li>
<li><strong>Step 2：</strong>细化Fruit和Snake数据结构内部。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fruit</span> </span>&#123;</div><div class="line">       <span class="keyword">constructor</span>(x, y)&#123;</div><div class="line">           <span class="comment">// 确定水果的坐标，也可添加别的参数，例如水果的分值，不设置就默认为1</span></div><div class="line">           <span class="keyword">this</span>.x = x;</div><div class="line">           <span class="keyword">this</span>.y = y;</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">   <span class="class"><span class="keyword">class</span> <span class="title">Snake</span> </span>&#123;</div><div class="line"></div><div class="line">       <span class="keyword">constructor</span>(sHead)&#123;</div><div class="line">           <span class="comment">// 蛇身的坐标数组</span></div><div class="line">           <span class="keyword">let</span> point = &#123;<span class="attr">x</span>: <span class="number">0</span>,<span class="attr">y</span>: <span class="number">0</span>&#125;;</div><div class="line">           <span class="keyword">let</span> point_array = [];</div><div class="line">           <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span> ; i++ )&#123;</div><div class="line">               point = &#123;<span class="attr">x</span> : sHead.x , <span class="attr">y</span> : sHead.y + i&#125;;</div><div class="line">               point_array[i] = point;</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">this</span>.point_array = point_array;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       length()&#123;</div><div class="line">       	<span class="comment">//获得蛇的长度</span></div><div class="line">           <span class="keyword">return</span> <span class="keyword">this</span>.point_array.length;</div><div class="line">       &#125;</div><div class="line">	<span class="comment">//蛇吃了水果以后长大的实现函数</span></div><div class="line">       growUp(direction)&#123;</div><div class="line">           <span class="keyword">let</span> newHead = &#123;<span class="attr">x</span> : <span class="keyword">this</span>.point_array[<span class="number">0</span>].x + direction.x , <span class="attr">y</span> : <span class="keyword">this</span>.point_array[<span class="number">0</span>].y + direction.y&#125;;</div><div class="line">           <span class="keyword">this</span>.point_array = [newHead].concat(<span class="keyword">this</span>.point_array);</div><div class="line">       &#125;</div><div class="line">	<span class="comment">//蛇往前走时，把蛇尾的小方格删掉，在蛇头多添一个小方格</span></div><div class="line">       goAhead(direction)&#123;</div><div class="line">           <span class="keyword">let</span> newHead = &#123;<span class="attr">x</span> : <span class="keyword">this</span>.point_array[<span class="number">0</span>].x + direction.x , <span class="attr">y</span> : <span class="keyword">this</span>.point_array[<span class="number">0</span>].y + direction.y&#125;;</div><div class="line">           <span class="keyword">this</span>.point_array = [newHead].concat(<span class="keyword">this</span>.point_array.slice(<span class="number">0</span>,<span class="number">-1</span>));</div><div class="line">       &#125;</div><div class="line">	<span class="comment">//获取蛇身坐标点的数组</span></div><div class="line">       getPointArray()&#123;</div><div class="line">           <span class="keyword">return</span> <span class="keyword">this</span>.point_array;</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>Step 3：</strong>根据游戏运行状态，细化Game类</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//每一局游戏都有一条蛇，每个时间点存在的唯一的水果，以及蛇目前的方向，以及游戏盘的大小</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span></span>&#123;</div><div class="line">        <span class="keyword">constructor</span>(snake,dir,fruit,width,height)&#123;</div><div class="line">            <span class="keyword">this</span>.snake = snake;</div><div class="line">            <span class="keyword">this</span>.direction = dir;</div><div class="line">            <span class="keyword">this</span>.fruit = fruit;</div><div class="line">            <span class="keyword">this</span>.width = width;</div><div class="line">            <span class="keyword">this</span>.height = height;</div><div class="line">        &#125;</div><div class="line">		<span class="comment">//nextStep()是一层很关键的抽象</span></div><div class="line">        nextStep()&#123;</div><div class="line">            <span class="keyword">const</span> n = <span class="keyword">this</span>.check();</div><div class="line">            <span class="keyword">switch</span> (n) &#123;</div><div class="line">                <span class="keyword">case</span> <span class="number">1</span>: <span class="keyword">return</span> <span class="keyword">this</span>.gameAhead();</div><div class="line">                <span class="keyword">case</span> <span class="number">2</span>: <span class="keyword">return</span> <span class="keyword">this</span>.growUp();</div><div class="line">                <span class="keyword">case</span> <span class="number">3</span>: <span class="keyword">return</span> <span class="keyword">this</span>.die();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        setDirection(dir)&#123;</div><div class="line">            <span class="keyword">this</span>.direction = dir;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        setFruit()&#123;</div><div class="line">            <span class="keyword">let</span> fruitX = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * <span class="keyword">this</span>.width);</div><div class="line">            <span class="keyword">let</span> fruitY = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * <span class="keyword">this</span>.height);</div><div class="line">            <span class="keyword">this</span>.fruit.x = fruitX;</div><div class="line">            <span class="keyword">this</span>.fruit.y = fruitY;</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        gameAhead()&#123;</div><div class="line">            <span class="keyword">this</span>.snake.goAhead(<span class="keyword">this</span>.direction);</div><div class="line">            <span class="keyword">return</span> &#123;<span class="attr">alive</span>: <span class="literal">true</span>, <span class="attr">map</span>: <span class="keyword">this</span>.draw(), <span class="attr">length</span>: <span class="keyword">this</span>.snake.length()&#125;;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        growUp()&#123;</div><div class="line">            <span class="keyword">this</span>.snake.growUp(<span class="keyword">this</span>.direction);</div><div class="line">            <span class="keyword">return</span> &#123;<span class="attr">alive</span>: <span class="literal">true</span>, <span class="attr">map</span>: <span class="keyword">this</span>.draw(), <span class="attr">length</span>: <span class="keyword">this</span>.snake.length()&#125;;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        die()&#123;</div><div class="line">            <span class="keyword">return</span> &#123;<span class="attr">alive</span>: <span class="literal">false</span>, <span class="attr">map</span>: <span class="keyword">this</span>.draw(), <span class="attr">length</span>: <span class="keyword">this</span>.snake.length()&#125;;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        draw()&#123;</div><div class="line"><span class="comment">//            Initialize the board</span></div><div class="line">            <span class="keyword">let</span> board = [];</div><div class="line">            <span class="keyword">let</span> isEmpty = <span class="literal">true</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>;i &lt; <span class="number">30</span>;i++ )&#123;</div><div class="line">                <span class="keyword">let</span> boardLine = [];</div><div class="line">                board.push(boardLine);</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>;j &lt; <span class="number">30</span>;j++)&#123;</div><div class="line">                    boardLine.push(<span class="number">0</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> y = <span class="number">0</span>;y &lt; <span class="keyword">this</span>.width;y++)&#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">let</span> x = <span class="number">0</span>;x &lt; <span class="keyword">this</span>.height;x++)&#123;</div><div class="line">                    isEmpty = <span class="literal">true</span>;</div><div class="line">                    <span class="keyword">for</span>(<span class="keyword">let</span> k = <span class="number">0</span>; k &lt; <span class="keyword">this</span>.snake.length();k++)&#123;</div><div class="line">                        <span class="keyword">if</span>(y == <span class="keyword">this</span>.snake.point_array[<span class="number">0</span>].y &amp;&amp; x == <span class="keyword">this</span>.snake.point_array[<span class="number">0</span>].x)&#123;</div><div class="line">                            board[y][x] = <span class="number">1</span>;</div><div class="line">                            isEmpty = <span class="literal">false</span>;<span class="literal">true</span></div><div class="line">                            <span class="keyword">continue</span>;</div><div class="line">                        &#125;</div><div class="line">                        <span class="keyword">if</span>(y == <span class="keyword">this</span>.snake.point_array[k].y &amp;&amp; x == <span class="keyword">this</span>.snake.point_array[k].x)&#123;</div><div class="line">                            board[y][x] = <span class="number">2</span>;</div><div class="line">                            isEmpty = <span class="literal">false</span>;</div><div class="line">                        &#125;</div><div class="line">                        <span class="keyword">if</span>(y == <span class="keyword">this</span>.fruit.y &amp;&amp; x == <span class="keyword">this</span>.fruit.x)&#123;</div><div class="line">                            board[y][x] = <span class="number">3</span>;</div><div class="line">                            isEmpty = <span class="literal">false</span>;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span> (isEmpty)</div><div class="line">                        board[y][x] = <span class="number">0</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> board;</div><div class="line">        &#125;</div><div class="line">        check()&#123;</div><div class="line">            <span class="keyword">if</span>(!<span class="keyword">this</span>.checkSnake()) <span class="keyword">return</span> <span class="number">3</span>;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">if</span>(<span class="keyword">this</span>.eatFruit())&#123;</div><div class="line">                    <span class="keyword">do</span> &#123;</div><div class="line">                        <span class="keyword">this</span>.setFruit();</div><div class="line">                    &#125;<span class="keyword">while</span>(<span class="keyword">this</span>.checkFruit());</div><div class="line">                    <span class="keyword">return</span> <span class="number">2</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        checkFruit()&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span> ; j &lt; <span class="keyword">this</span>.snake.length() ; j++)&#123;</div><div class="line">                <span class="keyword">if</span>(<span class="keyword">this</span>.fruit.x == <span class="keyword">this</span>.snake.point_array[j].x &amp;&amp; <span class="keyword">this</span>.fruit.y == <span class="keyword">this</span>.snake.point_array[j].y)&#123;</div><div class="line">                    <span class="keyword">this</span>.setFruit();</div><div class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">        checkSnake()&#123;</div><div class="line">            <span class="keyword">let</span> head = <span class="keyword">this</span>.snake.point_array[<span class="number">0</span>];</div><div class="line">            <span class="keyword">let</span> newHead = &#123;<span class="attr">x</span> : head.x + <span class="keyword">this</span>.direction.x , <span class="attr">y</span> : head.y + <span class="keyword">this</span>.direction.y&#125;;</div><div class="line">            <span class="keyword">let</span> point_array = <span class="keyword">this</span>.snake.point_array;</div><div class="line">            point_array = [newHead].concat(point_array.slice(<span class="number">0</span>,<span class="number">-1</span>));</div><div class="line"><span class="comment">//            touch the border</span></div><div class="line">            <span class="keyword">if</span>(newHead.x &gt;= <span class="keyword">this</span>.width || newHead.x &lt; <span class="number">0</span> || newHead.y &lt; <span class="number">0</span> || newHead.y &gt;= <span class="keyword">this</span>.height) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line"><span class="comment">//            kill itself</span></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>;i &lt; <span class="keyword">this</span>.snake.length();i++)&#123;</div><div class="line">                <span class="keyword">if</span>(point_array[i].x == newHead.x &amp;&amp; point_array[i].y == newHead.y)</div><div class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        eatFruit()&#123;</div><div class="line">            <span class="keyword">return</span> (<span class="keyword">this</span>.snake.point_array[<span class="number">0</span>].x == <span class="keyword">this</span>.fruit.x &amp;&amp; <span class="keyword">this</span>.snake.point_array[<span class="number">0</span>].y == <span class="keyword">this</span>.fruit.y);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ul>
<li><p><strong>Step 4：</strong>初始化你的游戏状态</p>
<pre><code class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">GameInit</span>(<span class="params"></span>) </span>{
    <span class="keyword">let</span> width = <span class="number">30</span>;
    <span class="keyword">let</span> height = <span class="number">30</span>;
    <span class="keyword">let</span> snakeHead = {<span class="attr">x</span> : <span class="number">14</span> , <span class="attr">y</span> : <span class="number">14</span>};
    <span class="keyword">let</span> fruit = {<span class="attr">x</span>:<span class="number">15</span>,<span class="attr">y</span>:<span class="number">15</span>};
    <span class="keyword">let</span> snake = <span class="keyword">new</span> Snake(snakeHead);
    <span class="keyword">let</span> newGame = <span class="keyword">new</span> Game(snake,UP,fruit,width,height);
    <span class="keyword">return</span> newGame;
}
</code></pre>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> 项目文档 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js类型]]></title>
      <url>http://blog.asleepig.cn/2017/03/12/js%E7%B1%BB%E5%9E%8B/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>关于js基本类型的容易混淆点，双等号和三等号的区别，基本数据类型和引用数据类型的辨析<a id="more"></a></excerpt></p>
<p><the rest="" of="" contents="" |="" 余下全文=""><br>javascript里面包含了<strong>七种</strong>数据类型，其中6种称为<strong>基本数据类型</strong>(Boolean, null, undefined, Number, String, Symbol),剩下的就是Object对象。</the></p>
<p>其中：<br>Boolean: 布尔值，true和false<br>null: 一个表明 null 值的特殊关键字。 JavaScript 是大小写敏感的，<strong>因此 null 与 Null、NULL或其他变量完全不同</strong>。<br>undefined: 变量未定义时的属性。<br>Number: 表示数字。<br>String: 表示字符串。<br>Symbol: ES6新增的数据类型，它的实例是唯一的且不可改变的。  </p>
<p>接下来讨论几点比较容易迷惑的地方：  </p>
<ol>
<li><p>==与===的区别<br>==是比较值，而===是比较堆地址</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> a = <span class="string">"1"</span>;</div><div class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">"1"</span>);</div><div class="line"><span class="built_in">console</span>.log(a == b);</div><div class="line"><span class="comment">//true</span></div><div class="line"><span class="built_in">console</span>.log(a === b);</div><div class="line"><span class="comment">//false,因为a和b指向的堆地址不同</span></div></pre></td></tr></table></figure>
</li>
<li><p>false的等效值:  </p>
</li>
</ol>
<ul>
<li>false</li>
<li>undefined</li>
<li>null</li>
<li>0</li>
<li>NaN</li>
<li>空字符串””<br><strong>请注意：不要混淆原始布尔值的true和false 与 布尔对象的true和false</strong><pre><code class="javascript"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">false</span>)  
<span class="keyword">if</span>(a){
  ...
<span class="comment">//此时将执行代码</span>
}  
<span class="keyword">if</span>(a == <span class="literal">true</span>){  
  ...
<span class="comment">//  此时不会执行代码</span>
}
</code></pre>
</li>
</ul>
<ol>
<li>有关于包装类型<br>ECMAScript还提供了三个特殊的引用类型Boolean,String,Number。我们称这三个特殊的引用类型为基本包装类型，也叫<strong>包装对象</strong>.也就是说当读取string,boolean和number这三个基本数据类型的时候，后台就会创建一个对应的基本包装类型对象，从而让我们能够调用一些方法来操作这些数据。  <pre><code class="javascript"><span class="keyword">let</span> str = <span class="string">"12213"</span>
<span class="keyword">let</span> strNum = str.substr(<span class="number">2</span>)
<span class="comment">/*
当第二行代码访问str时后台有以下操作  
1.创建String类型的一个实例  
2.在实例上调用指定方法    
3.销毁这个实例  
*／</span>
</code></pre>
</li>
</ol>
<p>正因为有第三步这个销毁的动作，所以你应该能够明白为什么基本数据类型不可以添加属性和方法，这也正是基本装包类型和引用类型主要区别：对象的生存期.使用new操作符创建的引用类型的实例，在执行流离开当前作用域之前都是一直保存在内存中.而自动创建的基本包装类型的对象，则只存在于一行代码的执行瞬间，然后立即被销毁<br><a href="http://www.html-js.com/article/4015" target="_blank" rel="external">基本数据类型和引用类型的区别详解</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Grammar_and_Types" target="_blank" rel="external">js的数据类型|mdn</a></p>
]]></content>
      
        
        <tags>
            
            <tag> jvascript基础 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
